<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/AuctionService/Controllers/AuctionController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/AuctionService/Controllers/AuctionController.cs" />
              <option name="originalContent" value="using AuctionService.Contexts;&#10;using AuctionService.Dtos;&#10;using AuctionService.Entities;&#10;using AutoMapper;&#10;using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace AuctionService.Controllers;&#10;&#10;public class AuctionsController: BaseController&#10;{&#10;    private readonly AuctionDbContext _context;&#10;    private readonly IMapper _mapper;&#10;&#10;    public AuctionsController(AuctionDbContext context, IMapper mapper)&#10;    {&#10;        _context = context;&#10;        _mapper = mapper;&#10;    }&#10;    [HttpGet]&#10;    public async Task&lt;ActionResult&lt;List&lt;AuctionDto&gt;&gt;&gt; GetAuctions()&#10;    {&#10;        var auctions = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .OrderBy(x =&gt; x.Item.Make)&#10;            .ToListAsync();&#10;        return _mapper.Map&lt;List&lt;AuctionDto&gt;&gt;(auctions);&#10;    }&#10;&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;AuctionDto&gt;&gt; GetAuctionById(Guid id)&#10;    {&#10;        var auction = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .FirstOrDefaultAsync(x =&gt; x.Id == id);&#10;        if (auction == null) return NotFound();&#10;        return _mapper.Map&lt;AuctionDto&gt;(auction);&#10;    }&#10;&#10;    [HttpPost]&#10;    public async Task&lt;ActionResult&lt;AuctionDto&gt;&gt; CreateAuction(CreateAuctionDto creationData)&#10;    {&#10;        var auction = _mapper.Map&lt;Auction&gt;(creationData);&#10;        // TODO: add current user as seller when you've implemented identity&#10;        auction.Seller = &quot;test&quot;;&#10;        await _context.Auctions.AddAsync(auction);&#10;        var result = await _context.SaveChangesAsync() &gt; 0;&#10;        if (!result) return BadRequest(new {error = &quot;Couldn't Save Changes To The Database&quot;});&#10;        return CreatedAtAction(nameof(GetAuctionById), new {auction.Id}, _mapper.Map&lt;AuctionDto&gt;(auction));&#10;    }&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&gt; UpdateAuction(Guid id, UpdateAuctionDto updateData)&#10;    {&#10;        var auction = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .FirstOrDefaultAsync(x =&gt; x.Id == id);&#10;        if (auction == null) return NotFound();&#10;        // TODO : check if current user is the seller when you've implemented identity &#10;        // return Unauthorized();&#10;        // no need for mapping &#10;        auction.Item.Make = updateData.Make ?? auction.Item.Make;&#10;        auction.Item.Model = updateData.Model ?? auction.Item.Model;&#10;        auction.Item.Year = updateData.Year ?? auction.Item.Year;&#10;        auction.Item.Color = updateData.Color ?? auction.Item.Color;&#10;        auction.Item.Mileage = updateData.Mileage ?? auction.Item.Mileage;&#10;        var result = await _context.SaveChangesAsync() &gt; 0;&#10;        if (!result) return BadRequest(new {error = &quot;Couldn't Save Changes To The Database&quot;});&#10;        return Ok();&#10;    }&#10;&#10;    // [HttpDelete(&quot;{id}&quot;)]&#10;    // public async Task&lt;ActionResult&gt; DeleteAuction(Guid id)&#10;    // {&#10;    //     var auction = await _context.Auctions.FindAsync(id);&#10;    //     if (auction == null) return NotFound();&#10;    //     _context.Auctions.Remove(auction);&#10;    //     var result = await _context.SaveChangesAsync() &gt; 0;&#10;    //     if (!result) return BadRequest(new {error = &quot;Couldn't Delete Auction From The Database&quot;});&#10;    //     return NoContent();&#10;    // }&#10;&#10;}" />
              <option name="updatedContent" value="using AuctionService.Contexts;&#10;using AuctionService.Dtos;&#10;using AuctionService.Entities;&#10;using AutoMapper;&#10;using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace AuctionService.Controllers;&#10;&#10;public class AuctionsController: BaseController&#10;{&#10;    private readonly AuctionDbContext _context;&#10;    private readonly IMapper _mapper;&#10;&#10;    public AuctionsController(AuctionDbContext context, IMapper mapper)&#10;    {&#10;        _context = context;&#10;        _mapper = mapper;&#10;    }&#10;    [HttpGet]&#10;    public async Task&lt;ActionResult&lt;List&lt;AuctionDto&gt;&gt;&gt; GetAuctions()&#10;    {&#10;        var auctions = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .OrderBy(x =&gt; x.Item.Make)&#10;            .ToListAsync();&#10;        return _mapper.Map&lt;List&lt;AuctionDto&gt;&gt;(auctions);&#10;    }&#10;&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;AuctionDto&gt;&gt; GetAuctionById(Guid id)&#10;    {&#10;        var auction = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .FirstOrDefaultAsync(x =&gt; x.Id == id);&#10;        if (auction == null) return NotFound();&#10;        return _mapper.Map&lt;AuctionDto&gt;(auction);&#10;    }&#10;&#10;    [HttpPost]&#10;    public async Task&lt;ActionResult&lt;AuctionDto&gt;&gt; CreateAuction(CreateAuctionDto creationData)&#10;    {&#10;        var auction = _mapper.Map&lt;Auction&gt;(creationData);&#10;        // TODO: add current user as seller when you've implemented identity&#10;        auction.Seller = &quot;test&quot;;&#10;        await _context.Auctions.AddAsync(auction);&#10;        var result = await _context.SaveChangesAsync() &gt; 0;&#10;        if (!result) return BadRequest(new {error = &quot;Couldn't Save Changes To The Database&quot;});&#10;        return CreatedAtAction(nameof(GetAuctionById), new {auction.Id}, _mapper.Map&lt;AuctionDto&gt;(auction));&#10;    }&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&gt; UpdateAuction(Guid id, UpdateAuctionDto updateData)&#10;    {&#10;        var auction = await _context.Auctions&#10;            .Include(x =&gt; x.Item)&#10;            .FirstOrDefaultAsync(x =&gt; x.Id == id);&#10;        if (auction == null) return NotFound();&#10;        // TODO : check if current user is the seller when you've implemented identity &#10;        // return Unauthorized();&#10;        // no need for mapping &#10;        auction.Item.Make = updateData.Make ?? auction.Item.Make;&#10;        auction.Item.Model = updateData.Model ?? auction.Item.Model;&#10;        auction.Item.Year = updateData.Year ?? auction.Item.Year;&#10;        auction.Item.Color = updateData.Color ?? auction.Item.Color;&#10;        auction.Item.Mileage = updateData.Mileage ?? auction.Item.Mileage;&#10;        var result = await _context.SaveChangesAsync() &gt; 0;&#10;        if (!result) return BadRequest(new {error = &quot;Couldn't Save Changes To The Database&quot;});&#10;        return Ok();&#10;    }&#10;&#10;    // [HttpDelete(&quot;{id}&quot;)]&#10;    // public async Task&lt;ActionResult&gt; DeleteAuction(Guid id)&#10;    // {&#10;    //     var auction = await _context.Auctions.FindAsync(id);&#10;    //     if (auction == null) return NotFound();&#10;    //     _context.Auctions.Remove(auction);&#10;    //     var result = await _context.SaveChangesAsync() &gt; 0;&#10;    //     if (!result) return BadRequest(new {error = &quot;Couldn't Delete Auction From The Database&quot;});&#10;    //     return NoContent();&#10;    // }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/AuctionService/Extensions/DbSeeder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/AuctionService/Extensions/DbSeeder.cs" />
              <option name="originalContent" value="using AuctionService.Contexts;&#10;using AuctionService.Entities;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace AuctionService.Extensions;&#10;&#10;public class DbSeeder&#10;{&#10;    public static async Task InitDb(WebApplication application)&#10;    {&#10;        using var scope = application.Services.CreateScope();&#10;        await SeedData(scope.ServiceProvider.GetService&lt;AuctionDbContext&gt;());&#10;    }&#10;&#10;    private static async Task SeedData(AuctionDbContext context)&#10;    {&#10;        await context.Database.MigrateAsync();&#10;        if (await context.Auctions.AnyAsync())&#10;        {&#10;            Console.WriteLine(&quot;We have data - not seeding&quot;);&#10;            return;&#10;        }&#10;&#10;        var auctions = new List&lt;Auction&gt;()&#10;        {&#10;            &#9;    // 1 Ford GT&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;afbee524-5972-4075-8800-7d1f9d7b0a0c&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(10),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;GT&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 50000,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/05/06/16/32/car-1376190_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 2 Bugatti Veyron&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;c8c3ec17-01bf-49db-82aa-1ef80b833a9f&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 90000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(60),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Bugatti&quot;,&#10;                    Model = &quot;Veyron&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 15035,&#10;                    Year = 2018,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2012/05/29/00/43/car-49278_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 3 Ford mustang&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;bbab4d5a-8565-48b1-9450-5ac2a5c4a654&quot;),&#10;                Status = Status.Live,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(4),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;Mustang&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 65125,&#10;                    Year = 2023,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2012/11/02/13/02/car-63930_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 4 Mercedes SLK&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;155225c1-4448-4066-9886-6786536e05ea&quot;),&#10;                Status = Status.ReserveNotMet,&#10;                ReservePrice = 50000,&#10;                Seller = &quot;tom&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(-10),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Mercedes&quot;,&#10;                    Model = &quot;SLK&quot;,&#10;                    Color = &quot;Silver&quot;,&#10;                    Mileage = 15001,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/04/17/22/10/mercedes-benz-1335674_960_720.png&quot;&#10;                }&#10;            },&#10;            // 5 BMW X1&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;466e4744-4dc5-4987-aae0-b621acfc5e39&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(30),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;BMW&quot;,&#10;                    Model = &quot;X1&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 90000,&#10;                    Year = 2017,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/08/31/05/47/bmw-2699538_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 6 Ferrari spider&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;dc1e4071-d19d-459b-b848-b5c3cd3d151f&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(45),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ferrari&quot;,&#10;                    Model = &quot;Spider&quot;,&#10;                    Color = &quot;Red&quot;,&#10;                    Mileage = 50000,&#10;                    Year = 2015,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/11/09/01/49/ferrari-458-spider-2932191_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 7 Ferrari F-430&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;47111973-d176-4feb-848d-0ea22641c31a&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 150000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(13),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ferrari&quot;,&#10;                    Model = &quot;F-430&quot;,&#10;                    Color = &quot;Red&quot;,&#10;                    Mileage = 5000,&#10;                    Year = 2022,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/11/08/14/39/ferrari-f430-2930661_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 8 Audi R8&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;6a5011a1-fe1f-47df-9a32-b5346b289391&quot;),&#10;                Status = Status.Live,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(19),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Audi&quot;,&#10;                    Model = &quot;R8&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 10050,&#10;                    Year = 2021,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2019/12/26/20/50/audi-r8-4721217_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 9 Audi TT&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;40490065-dac7-46b6-acc4-df507e0d6570&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;tom&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(20),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Audi&quot;,&#10;                    Model = &quot;TT&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 25400,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/09/01/15/06/audi-1636320_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 10 Ford Model T&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;3659ac24-29dd-407a-81f5-ecfe6f924b9b&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(48),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;Model T&quot;,&#10;                    Color = &quot;Rust&quot;,&#10;                    Mileage = 150150,&#10;                    Year = 1938,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/08/02/19/47/vintage-2573090_960_720.jpg&quot;&#10;                }&#10;            }&#10;        };&#10;        await context.AddRangeAsync(auctions);&#10;        await context.SaveChangesAsync();&#10;    }&#10;}" />
              <option name="updatedContent" value="using AuctionService.Contexts;&#10;using AuctionService.Entities;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace AuctionService.Extensions;&#10;&#10;public class DbSeeder&#10;{&#10;    public static async Task InitDb(WebApplication application)&#10;    {&#10;        using var scope = application.Services.CreateScope();&#10;        await SeedData(scope.ServiceProvider.GetService&lt;AuctionDbContext&gt;());&#10;    }&#10;&#10;    private static async Task SeedData(AuctionDbContext context)&#10;    {&#10;        await context.Database.MigrateAsync();&#10;        if (await context.Auctions.AnyAsync())&#10;        {&#10;            Console.WriteLine(&quot;We have data - not seeding&quot;);&#10;            return;&#10;        }&#10;&#10;        var auctions = new List&lt;Auction&gt;()&#10;        {&#10;            &#9;    // 1 Ford GT&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;afbee524-5972-4075-8800-7d1f9d7b0a0c&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(10),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;GT&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 50000,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/05/06/16/32/car-1376190_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 2 Bugatti Veyron&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;c8c3ec17-01bf-49db-82aa-1ef80b833a9f&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 90000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(60),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Bugatti&quot;,&#10;                    Model = &quot;Veyron&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 15035,&#10;                    Year = 2018,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2012/05/29/00/43/car-49278_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 3 Ford mustang&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;bbab4d5a-8565-48b1-9450-5ac2a5c4a654&quot;),&#10;                Status = Status.Live,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(4),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;Mustang&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 65125,&#10;                    Year = 2023,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2012/11/02/13/02/car-63930_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 4 Mercedes SLK&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;155225c1-4448-4066-9886-6786536e05ea&quot;),&#10;                Status = Status.ReserveNotMet,&#10;                ReservePrice = 50000,&#10;                Seller = &quot;tom&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(-10),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Mercedes&quot;,&#10;                    Model = &quot;SLK&quot;,&#10;                    Color = &quot;Silver&quot;,&#10;                    Mileage = 15001,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/04/17/22/10/mercedes-benz-1335674_960_720.png&quot;&#10;                }&#10;            },&#10;            // 5 BMW X1&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;466e4744-4dc5-4987-aae0-b621acfc5e39&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(30),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;BMW&quot;,&#10;                    Model = &quot;X1&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 90000,&#10;                    Year = 2017,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/08/31/05/47/bmw-2699538_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 6 Ferrari spider&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;dc1e4071-d19d-459b-b848-b5c3cd3d151f&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(45),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ferrari&quot;,&#10;                    Model = &quot;Spider&quot;,&#10;                    Color = &quot;Red&quot;,&#10;                    Mileage = 50000,&#10;                    Year = 2015,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/11/09/01/49/ferrari-458-spider-2932191_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 7 Ferrari F-430&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;47111973-d176-4feb-848d-0ea22641c31a&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 150000,&#10;                Seller = &quot;alice&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(13),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ferrari&quot;,&#10;                    Model = &quot;F-430&quot;,&#10;                    Color = &quot;Red&quot;,&#10;                    Mileage = 5000,&#10;                    Year = 2022,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/11/08/14/39/ferrari-f430-2930661_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 8 Audi R8&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;6a5011a1-fe1f-47df-9a32-b5346b289391&quot;),&#10;                Status = Status.Live,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(19),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Audi&quot;,&#10;                    Model = &quot;R8&quot;,&#10;                    Color = &quot;White&quot;,&#10;                    Mileage = 10050,&#10;                    Year = 2021,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2019/12/26/20/50/audi-r8-4721217_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 9 Audi TT&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;40490065-dac7-46b6-acc4-df507e0d6570&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;tom&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(20),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Audi&quot;,&#10;                    Model = &quot;TT&quot;,&#10;                    Color = &quot;Black&quot;,&#10;                    Mileage = 25400,&#10;                    Year = 2020,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2016/09/01/15/06/audi-1636320_960_720.jpg&quot;&#10;                }&#10;            },&#10;            // 10 Ford Model T&#10;            new Auction&#10;            {&#10;                Id = Guid.Parse(&quot;3659ac24-29dd-407a-81f5-ecfe6f924b9b&quot;),&#10;                Status = Status.Live,&#10;                ReservePrice = 20000,&#10;                Seller = &quot;bob&quot;,&#10;                AuctionEnd = DateTime.UtcNow.AddDays(48),&#10;                Item = new Item&#10;                {&#10;                    Make = &quot;Ford&quot;,&#10;                    Model = &quot;Model T&quot;,&#10;                    Color = &quot;Rust&quot;,&#10;                    Mileage = 150150,&#10;                    Year = 1938,&#10;                    ImageUrl = &quot;https://cdn.pixabay.com/photo/2017/08/02/19/47/vintage-2573090_960_720.jpg&quot;&#10;                }&#10;            }&#10;        };&#10;        await context.AddRangeAsync(auctions);&#10;        await context.SaveChangesAsync();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>